# - name: Disabling Nodejs                                    # For disabling and enabling nodejs, we didn't find the relevant ansible module
#   ansible.builtin.shell: dnf module disable nodejs -y 

# - name: Enabling Nodejs                                    # For disabling and enabling nodejs, we didn't find the relevant ansible module
#   ansible.builtin.shell: dnf module enable nodejs:20 -y 

# - name: Installing nodejs 
#   ansible.builtin.dnf:
#     name: nodejs 
#     state: present 

# - name: Adding app user expense 
#   ansible.builtin.user:
#     name: "{{app_user}}"
#     comment: Application User 

# - name: App Prequisite Tasks
#   ansible.builtin.include_role:      # Through this we can all a specific task from a role
#     name: common                     # Name of the role to be called 
#     tasks_from: pre-req              # Name of the task in the above mentioned role 

# - name: Generating node_modules
#   community.general.npm:
#     path: "{{APP_PATH}}"
#   become_user: "{{app_user}}"

# - name: Installing Newrelic Agent
#   community.general.npm:
#     name: newrelic
#     path: "{{APP_PATH}}"
#   become_user: "{{app_user}}"

# - name: Install MySQL Client
#   ansible.builtin.dnf:
#     name: mysql
#     state: installed

# - name: Install Prereq packages for mysql_db
#   ansible.builtin.pip:
#     name:
#       - PyMySQL
#       - cryptography                            # Dependency packages for community.mysql.mysql_db:   
#     executable: pip3.11

- name: Installingf MySQL Client
  ansible.builtin.dnf:
    name:
      - mysql                 
      - python3-PyMySQL                
    state: present

# - name: Load Schema
#   community.mysql.mysql_db:
#     state: import
#     name: all
#     target: /app/schema/backend.sql
#     login_user: "{{secrets.MYSQL_USER}}"
#     login_password: "{{secrets.MYSQL_PASS}}"         # ensure secrets variable is supplied
#     login_host: "{{secrets.DB_HOST}}"

- name: Installing Docker 
  ansible.builtin.package:
    name: docker
    state: present  

- name: Injecting Schema 
  containers.podman.podman_container:
    name: schema
    image: docker.io/sanraman/expense-schema-loader:latest
    state: started
    restart: true
    env:
      login_user: "{{secrets.MYSQL_USER}}"
      login_password: "{{secrets.MYSQL_PASS}}"         
      login_host: "{{secrets.DB_HOST}}"
      app_repo: https://github.com/expenseapp-001/expense-backend.git 
      schema_file: /app/schema/backend.sql

- name: Starting Backend Container
  containers.podman.podman_container:
    name: backend
    image: docker.io/sanraman/expense-backend:latest
    state: started
    restart: true
    ports:
        - "8080:8080"
    env:
        COMPONENT: "backend"
        DB_HOST: "{{secrets.DB_HOST}}"


# - name: Copying Systemd file 
#   ansible.builtin.template:
#     src: systemd.service
#     dest: /etc/systemd/system/{{COMPONENT}}.service

# - name: Copying Rsyslog file 
#   ansible.builtin.template:
#     src: backend.conf
#     dest: /etc/rsyslog.d/backend.conf 

# - name: Restarting {{COMPONENT}} on {{ENV}}
#   ansible.builtin.systemd_service:
#     name: rsyslog
#     state: restarted
#     enabled: true
#     daemon_reload: true

# - name: Restarting {{COMPONENT}} on {{ENV}}
#   ansible.builtin.systemd_service:
#     name: "{{COMPONENT}}" 
#     state: restarted
#     enabled: true
#     daemon_reload: true